name: 'Terraform CI/CD'

on:
  push:
    branches:
      - main
      - master
      - develop
  pull_request:
    branches:
      - main
      - master
      - develop
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - prod

env:
  TF_VERSION: '1.5.0'

jobs:
  validate:
    name: 'Terraform Validate'
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Terraform Format Check
      run: terraform fmt -check -recursive

    - name: Terraform Init
      run: terraform init -backend=false

    - name: Terraform Validate
      run: terraform validate

  tflint:
    name: 'TFLint'
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Setup TFLint
      uses: terraform-linters/setup-tflint@v3

    - name: Init TFLint
      run: tflint --init

    - name: Run TFLint
      run: tflint --recursive

  security-scan:
    name: 'Security Scan'
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Run Checkov
      uses: bridgecrewio/checkov-action@master
      with:
        directory: .
        framework: terraform
        output_format: github_failed_only
        soft_fail: true

  plan:
    name: 'Terraform Plan'
    runs-on: ubuntu-latest
    needs: [validate, tflint, security-scan]
    if: github.event_name == 'pull_request'
    strategy:
      matrix:
        environment: [dev, prod]
    
    env:
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Setup SSH Key
      run: |
        mkdir -p ~/.ssh
        ssh-keygen -t rsa -b 4096 -f ~/.ssh/id_rsa -N ""

    - name: Terraform Init
      run: terraform init -backend-config=environments/${{ matrix.environment }}/backend.tf

    - name: Terraform Plan
      run: |
        terraform plan -var-file=environments/${{ matrix.environment }}/terraform.tfvars \
          -out=tfplan-${{ matrix.environment }}

    - name: Upload Plan
      uses: actions/upload-artifact@v3
      with:
        name: tfplan-${{ matrix.environment }}
        path: tfplan-${{ matrix.environment }}

  deploy:
    name: 'Terraform Apply'
    runs-on: ubuntu-latest
    needs: [validate, tflint, security-scan]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    environment: ${{ github.event.inputs.environment || 'dev' }}
    
    env:
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
      ENVIRONMENT: ${{ github.event.inputs.environment || 'dev' }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Setup SSH Key
      run: |
        mkdir -p ~/.ssh
        ssh-keygen -t rsa -b 4096 -f ~/.ssh/id_rsa -N ""

    - name: Terraform Init
      run: terraform init -backend-config=environments/${{ env.ENVIRONMENT }}/backend.tf

    - name: Terraform Apply
      run: |
        terraform apply -auto-approve \
          -var-file=environments/${{ env.ENVIRONMENT }}/terraform.tfvars

    - name: Terraform Output
      run: terraform output -json > outputs.json

    - name: Upload Outputs
      uses: actions/upload-artifact@v3
      with:
        name: terraform-outputs-${{ env.ENVIRONMENT }}
        path: outputs.json
